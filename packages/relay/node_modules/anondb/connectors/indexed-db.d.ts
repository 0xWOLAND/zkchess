import { IDBPDatabase, IDBPTransaction } from 'idb';
import { DB, FindOneOptions, FindManyOptions, WhereClause, UpdateOptions, UpsertOptions, DeleteManyOptions, TableData, TransactionDB, Schema } from '../types';
declare type Config = {
    version: number;
    name: string;
};
export declare class IndexedDBConnector extends DB {
    db?: IDBPDatabase<any>;
    schema: Schema;
    config: Config;
    lock: any;
    constructor(schema: Schema);
    static create(tables: TableData[], _config?: number | Config): Promise<IndexedDBConnector>;
    create(collection: string, _doc: any): Promise<any>;
    _create(collection: string, _doc: any, _tx?: IDBPTransaction<any, string[], 'readwrite'>): Promise<any>;
    findOne(collection: string, options: FindOneOptions): Promise<any>;
    findMany(collection: string, options: FindManyOptions): Promise<any>;
    _findMany(collection: string, options: FindManyOptions, _tx?: IDBPTransaction<any, string[], 'readwrite' | 'readonly'>): Promise<any[]>;
    private findUsingScan;
    count(collection: string, where: WhereClause): Promise<any>;
    update(collection: string, options: UpdateOptions): Promise<any>;
    _update(collection: string, options: UpdateOptions, _tx?: IDBPTransaction<any, string[], 'readwrite'>): Promise<number>;
    upsert(collection: string, options: UpsertOptions): Promise<any>;
    _upsert(collection: string, options: UpsertOptions, _tx?: IDBPTransaction<any, string[], 'readwrite'>): Promise<number>;
    delete(collection: string, options: DeleteManyOptions): Promise<any>;
    _delete(collection: string, options: DeleteManyOptions, _tx?: IDBPTransaction<any, string[], 'readwrite'>): Promise<number>;
    transaction(operation: (db: TransactionDB) => void, cb?: () => void): Promise<any>;
    _transaction(operation: (db: TransactionDB) => void | Promise<void>, onComplete?: () => void): Promise<void>;
    close(): Promise<void>;
    closeAndWipe(): Promise<void>;
}
export {};
//# sourceMappingURL=indexed-db.d.ts.map