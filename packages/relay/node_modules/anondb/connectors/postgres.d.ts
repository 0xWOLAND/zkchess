import { Client } from 'pg';
import { DB, Schema, FindOneOptions, FindManyOptions, WhereClause, UpdateOptions, UpsertOptions, DeleteManyOptions, TableData, TransactionDB } from '../types';
export declare class PostgresConnector extends DB {
    db: Client;
    config: any | string;
    schema: Schema;
    lock: any;
    constructor(config: any | string);
    init(): Promise<void>;
    static create(tables: TableData[], config: any | string): Promise<PostgresConnector>;
    create(collection: string, _doc: any): Promise<any>;
    private _create;
    findOne(collection: string, options: FindOneOptions): Promise<any>;
    private _findOne;
    findMany(collection: string, options: FindManyOptions): Promise<any>;
    private _findMany;
    count(collection: string, where: WhereClause): Promise<any>;
    private _count;
    update(collection: string, options: UpdateOptions): Promise<any>;
    private _update;
    upsert(collection: string, options: UpsertOptions): Promise<any>;
    private _upsert;
    delete(collection: string, options: DeleteManyOptions): Promise<any>;
    private _deleteMany;
    createTables(tableData: TableData[]): Promise<void>;
    transaction(operation: (db: TransactionDB) => void, cb?: () => void): Promise<any>;
    private _transaction;
    close(): Promise<void>;
    closeAndWipe(): Promise<void>;
}
//# sourceMappingURL=postgres.d.ts.map