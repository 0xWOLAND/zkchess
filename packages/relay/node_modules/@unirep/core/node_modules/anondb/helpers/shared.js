"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.loadIncluded = void 0;
function loadIncludedModels(models, relation, findMany, include) {
    return __awaiter(this, void 0, void 0, function* () {
        const values = models.map(model => model[relation.localField]);
        const submodels = yield findMany(relation.foreignTable, {
            where: {
                [relation.foreignField]: values,
            },
            include: include,
        });
        const keyedSubmodels = {};
        for (const submodel of submodels) {
            keyedSubmodels[submodel[relation.foreignField]] = submodel;
        }
        for (const model of models) {
            const submodel = keyedSubmodels[model[relation.localField]];
            Object.assign(model, {
                [relation.name]: submodel || null,
            });
        }
    });
}
function loadIncluded(collection, options) {
    return __awaiter(this, void 0, void 0, function* () {
        const { models, include, table, findMany } = options;
        if (!include || !models || !models.length)
            return;
        if (!table)
            throw new Error(`Unable to find table ${collection} in schema`);
        for (const key of Object.keys(include)) {
            const relation = table.relations[key];
            if (!relation) {
                throw new Error(`Unable to find relation ${key} in ${collection}`);
            }
            if (include[key]) {
                yield loadIncludedModels(models, relation, findMany, typeof include[key] === 'object' ? include[key] : undefined);
            }
        }
    });
}
exports.loadIncluded = loadIncluded;
//# sourceMappingURL=shared.js.map