export declare type WhereClause = {
    [key: string]: any;
};
export declare type FindManyOptions = {
    where: WhereClause;
    orderBy?: {
        [key: string]: 'asc' | 'desc';
    };
    include?: {
        [key: string]: boolean | any;
    };
    limit?: number;
};
export declare type FindOneOptions = {
    where: WhereClause;
    orderBy?: {
        [key: string]: 'asc' | 'desc';
    };
    include?: {
        [key: string]: boolean | any;
    };
};
export declare type DeleteManyOptions = {
    where: WhereClause;
};
export declare type UpdateOptions = {
    where: WhereClause;
    update: any;
};
export declare type UpsertOptions = {
    where: WhereClause;
    update: any;
    create: any;
    constraintKey?: string;
};
export declare type DataType = 'Int' | 'Bool' | 'String' | 'Object';
export declare type Relation = {
    localField: string;
    foreignField: string;
    foreignTable: string;
};
export declare type RowDef = {
    name: string;
    unique?: boolean;
    optional?: boolean;
    index?: boolean;
    type: DataType;
    relation?: Relation;
    default?: any | 'autoincrement';
};
export declare type ShortRowDef = [
    string,
    DataType,
    {
        index?: boolean;
        optional?: boolean;
        unique?: boolean;
    } | undefined
];
export interface TableData {
    name: string;
    primaryKey: string | string[];
    rows: (RowDef | ShortRowDef)[];
    indexes?: TableIndex[];
}
export interface TableIndex {
    name: string;
    keys: string[];
    unique?: boolean;
    optional?: boolean;
}
export declare type SomeDBConnector = (new (...args: any[]) => DB) & {
    create: (tables: TableData[], ...args: any[]) => Promise<DB>;
};
export declare abstract class DB {
    static create: (tables: TableData[], ...args: any[]) => Promise<DB>;
    abstract create(collection: string, doc: any | any[]): Promise<any>;
    abstract findOne(collection: string, options: FindOneOptions): Promise<any>;
    abstract findMany(collection: string, options: FindManyOptions): Promise<any[]>;
    abstract count(collection: string, where: WhereClause): Promise<number>;
    abstract update(collection: string, options: UpdateOptions): Promise<number>;
    abstract upsert(collection: string, options: UpsertOptions): Promise<number>;
    abstract delete(collection: string, options: DeleteManyOptions): Promise<number>;
    abstract transaction(operation: (db: TransactionDB) => void, onComplete?: () => void): Promise<void>;
    abstract close(): Promise<void>;
    abstract closeAndWipe(): Promise<void>;
}
export interface TransactionDB {
    create: (collection: string, doc: any | any[]) => void;
    update: (collection: string, options: UpdateOptions) => void;
    upsert: (collection: string, options: UpsertOptions) => void;
    delete: (collection: string, options: DeleteManyOptions) => void;
    onCommit: (callback: Function) => void;
    onError: (callback: Function) => void;
    onComplete: (callback: Function) => void;
}
export declare type SchemaTable = {
    rowsByName: {
        [rowKey: string]: RowDef | undefined;
    };
    relations: {
        [relation: string]: (Relation & {
            name: string;
        }) | undefined;
    };
    rows: RowDef[];
} & TableData;
export declare type Schema = {
    [tableKey: string]: SchemaTable | undefined;
};
export declare function normalizeRowDef(row: RowDef | ShortRowDef): RowDef;
export declare function constructSchema(tables: TableData[]): Schema;
//# sourceMappingURL=types.d.ts.map