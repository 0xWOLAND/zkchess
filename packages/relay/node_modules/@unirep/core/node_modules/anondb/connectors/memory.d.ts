import { DB, Schema, FindManyOptions, FindOneOptions, WhereClause, UpdateOptions, UpsertOptions, DeleteManyOptions, TransactionDB } from '../types';
export declare class MemoryConnector extends DB {
    schema: Schema;
    lock: any;
    db: {
        __uniques__: {};
    };
    constructor(schema: Schema);
    uniqueRowKey(collection: string, row: string): string;
    uniqueRows(_collection: string): any[];
    checkForInvalidRows(_collection: string, doc: any, checkingWhere?: boolean): void;
    create(collection: string, doc: any): Promise<any>;
    _create(_collection: string, doc: any): Promise<any>;
    findMany(_collection: string, options: FindManyOptions): Promise<any[]>;
    findOne(collection: string, options: FindOneOptions): Promise<any>;
    count(collection: string, where: WhereClause): Promise<number>;
    update(collection: string, options: UpdateOptions): Promise<any>;
    _update(_collection: string, options: UpdateOptions): Promise<number>;
    upsert(collection: string, options: UpsertOptions): Promise<any>;
    _upsert(collection: string, options: UpsertOptions): Promise<number>;
    delete(collection: string, options: DeleteManyOptions): Promise<any>;
    _delete(_collection: string, options: DeleteManyOptions): Promise<number>;
    transaction(operation: (db: TransactionDB) => void, onComplete?: () => void): Promise<any>;
    _transaction(operation: (db: TransactionDB) => void, onComplete?: () => void): Promise<void>;
    close(): Promise<void>;
    closeAndWipe(): Promise<void>;
}
//# sourceMappingURL=memory.d.ts.map