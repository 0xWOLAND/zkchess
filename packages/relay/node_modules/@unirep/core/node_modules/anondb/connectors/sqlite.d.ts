import { DB, WhereClause, DeleteManyOptions, FindManyOptions, FindOneOptions, UpdateOptions, UpsertOptions, TableData, Schema, TransactionDB } from '../types';
export declare class SQLiteConnector extends DB {
    db: any;
    config: {
        filename: string;
    } & any;
    schema: Schema;
    lock: any;
    constructor(config: any);
    init(): Promise<void>;
    static create(tables: TableData[], _config: any | string): Promise<SQLiteConnector>;
    create(collection: string, _doc: any | any): Promise<any>;
    private _create;
    findOne(collection: string, options: FindOneOptions): Promise<any>;
    _findOne(collection: string, options: FindOneOptions): Promise<any>;
    findMany(collection: string, options: FindManyOptions): Promise<any>;
    _findMany(collection: string, options: FindManyOptions): Promise<any>;
    count(collection: string, where: WhereClause): Promise<any>;
    _count(collection: string, where: WhereClause): Promise<any>;
    update(collection: string, options: UpdateOptions): Promise<any>;
    private _update;
    upsert(collection: string, options: UpsertOptions): Promise<any>;
    _upsert(collection: string, options: UpsertOptions): Promise<any>;
    delete(collection: string, options: DeleteManyOptions): Promise<any>;
    private _deleteMany;
    transaction(operation: (db: TransactionDB) => void, cb?: () => void): Promise<any>;
    private _transaction;
    close(): Promise<void>;
    closeAndWipe(): Promise<void>;
    createTables(tableData: TableData[]): Promise<void>;
}
//# sourceMappingURL=sqlite.d.ts.map